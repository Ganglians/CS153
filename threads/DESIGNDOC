S 153      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Juan Chavez <jchav027@ucr.edu>
Tricia Hinkson  <think001@ucr.edu>

---- PRELIMINARIES ----
                                                  
>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
enum THREAD_SLEEPING: added to threads.h if label a thread as sleeping so it's not taken by scheduler


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
When timer_sleep() is called, all interrupts are turned off, timer_sleep() calls thread sleep which 
puts the current thread to sleep, and then all interrupts are turned back on.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
The timer interrupt handler calls are written in assembly so that they all happen as fast as possible.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
If real_time_sleep() decides not to call timer_sleep(), it calls real_time_delay which delays
the next real_time_sleep() loop for a random number of ticks

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
The first thing that timer_sleep() does is turn off all timer interrupts so that it can call
thread_sleep(). After thread_sleep() is called, timer interrupts are turned back on.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
I chose this design because it was based on the already existing thread_block and thread_unblock
which I knew worked already and it was easy to count down the number of ticks because thread_tick() 
exists.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
I added a lock*, and int to thread in order to keep track of the
lock the thread is waiting for and to keep track of priority
changes following a donation.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
The waiters list that the semaphore has is sorted by their thread's
highest priority using the highest_condition boolean function.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
The higher priority thread adds itself to the lock holder's lock_list
by highest priority and the priority of the lock holder is checked
and updated if the front of its lock_list has a priority higher than
what it does currently.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
The lock's holder has all threads in its lock_list that is waiting for
that lock removed to lower the holder's priority back to normal
and then the lock holder is set to NULL and the highest waiting thread
will receive the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
A probable race condition in set_priority is that when priority is being
read, it is also being set. I avoid this through turning off interrupts
since using a lock would cause the interrupts to immediately grab the lock
again so that all other threads are constantly interrupted at each timer tick.
---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
I tried to use a design that would mainly use what was given since there was less
chance of simple logic errors. Because of this I ended up adding a fair amount of
new variables to the thread structure. My first attempt was adding a list to each lock
so it would decide which would be its new owner, but was having problems with 
page faults and other implementation errors. Even getting past those, I had issues keeping
track of corrent priority donations so I ended up with threads with a lock_list anyway.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

